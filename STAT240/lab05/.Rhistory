pattern_non_bus = "Skytrain|SkyTrain|StationAlert|Elevator|elevator|Expo|WCE|West Coast Express|time|Time|SeaBus|Compass|Handy|morning|Morning|evening|desk|Desk|Transit|transit|Good|Rehab| night |tonight|will be|changes|Congrats|Pattullo Bridge|Valentines|year|Year|multi"
# create a new data frame for data manipulation
f=data.frame(Time = time, Post = tweet)
# Exclude these posts
df <- f[!grepl(pattern_non_bus,f$Post),]
# Delete all url from posts
pattern_url = "(.*) (.*)" #Greedy match to the last space
for (i in seq_along(df$Post)) {
if (str_detect(df$Post[i],"http")) {
df$Post[i] <- str_replace(df$Post[i],pattern_url,"\\1")
}
}
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Hwy\\s|Regular.*|Jan\\s|Feb\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\s|:\\d{1,})?(Ave|St |St,|St/|St鈥Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|鈥?)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return)).*(regular route|Regular route|onward|detour|experienc|suspend)"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
translink <- function(y,m,d,h){
# take four arguments of time, e.g., 2020,1,26,3
# Create an empty list to store results
ret = list(start=c(),stop=c())
# format input ymd_h
# i.e., (2020,1,26,3) -> "2020-01-26 03"
if(nchar(m)==1){m=str_c("0",m)}
if(nchar(d)==1){d=str_c("0",d)}
if(nchar(h)==1){h=str_c("0",h)}
date = str_c(y,m,d,sep="-")
datetime = str_c(date,h,sep = " ")
# Match time, then match Status, then combine/append vectors
for (i in seq_along(df2$Time)) {
if (str_detect(df2$Time[[i]], datetime)){ # time matched
if (df2$Status[[i]]) {  # Status == True
ret$start <- c(ret$start, df2$Routes[[i]]) # Append route# to start
} else {  # Status == False
ret$stop <- c(ret$stop, df2$Routes[[i]])  # Append route# to stop
}
}
}
# Remove all the Space in the Routes column
ret$start <- gsub('\\s+', '', ret$start)
ret$stop <- gsub('\\s+', '', ret$stop)
# Remove duplicates
ret$start = unique(ret$start)
ret$stop = unique(ret$stop)
# If no match, append warning message
if (length(ret$start)==0) {ret$start <- c(ret$start,"No detour had started")}
if (length(ret$stop)==0) {ret$stop <- c(ret$stop,"No detour had ended")}
return(ret)
}
View(df2)
# Test 2: Pass
df2$Post[22:24]
translink(2022,3,2,16)
# Test 2: Pass
print(df2$Post[22:24])
print(translink(2022,3,2,16))
# Test 3: Pass
df2$Post[53:54]
translink(2022,3,1,13)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# row 157, 158:
df2$Post[157:158]
translink(2022,2,24,20)
translink(2022,2,24,21)
# row 157, 158:
df2$Post[157]
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\s|:\\d{1,})?(Ave|St |St,|St/|St鈥Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|鈥?)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# row 157, 158:
df2$Post[157]
translink(2022,2,24,21)
df2$Post[158]
translink(2022,2,24,20)
# row 596 does not include its status; should have been filtered out
df2$Post[596]
translink(2022,1,31,16)
# Test 3: Pass
df2$Post[588:596]
translink(2022,1,31,16)
# Pattern to find posts irrelevant to bus routes
pattern_non_bus = "Skytrain|SkyTrain|StationAlert|Elevator|elevator|Expo|WCE|West Coast Express|time|Time|SeaBus|Compass|Handy|morning|Morning|evening|desk|Desk|Transit|transit|Good|Rehab| night |tonight| call|will be|changes|Congrats|Pattullo Bridge|Valentines|year|Year|multi"
# Exclude these posts
df <- f[!grepl(pattern_non_bus,f$Post),]
# Delete all url from posts
pattern_url = "(.*) (.*)" #Greedy match to the last space
for (i in seq_along(df$Post)) {
if (str_detect(df$Post[i],"http")) {
df$Post[i] <- str_replace(df$Post[i],pattern_url,"\\1")
}
}
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\s|:\\d{1,})?(Ave|St |St,|St/|St鈥Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|鈥?)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\s|:\\d{1,})?(Ave|St |St,|St/|St鈥Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|鈥?)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# Pattern to find posts irrelevant to bus routes
pattern_non_bus = "Skytrain|SkyTrain|StationAlert|Elevator|elevator|Expo|WCE|West Coast Express|board|time|Time|SeaBus|Compass|Handy|morning|Morning|evening|desk|Desk|Transit|transit|Good|Rehab| night |tonight| call|will be|changes|Congrats|Pattullo Bridge|Valentines|year|Year|multi"
# Exclude these posts
df <- f[!grepl(pattern_non_bus,f$Post),]
# Delete all url from posts
pattern_url = "(.*) (.*)" #Greedy match to the last space
for (i in seq_along(df$Post)) {
if (str_detect(df$Post[i],"http")) {
df$Post[i] <- str_replace(df$Post[i],pattern_url,"\\1")
}
}
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\s|:\\d{1,})?(Ave|St |St,|St/|St鈥Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|鈥?)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# Test 2: Pass
df2$Post[53:54]
translink(2022,3,1,13)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[588:596]
translink(2022,1,31,16)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[587:595]
translink(2022,1,31,16)
# row 157, 158 are not detour information; data are not tidy enough:
df2$Post[157]
translink(2022,2,24,21)
df2$Post[158]
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\d{1,3}\\s|:\\d+)?(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|…)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# row 157, 158 are not detour information; data are not tidy enough:
df2$Post[157]
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop |Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\d*\\s|:\\d+)?(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|…)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
View(df1)
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop\\s|Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\d+\\s|:\\d+)?(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|…)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = "([A-Z]|Bay\\s|Hwy\\s|stop\\s|Regular.*|Jan\\s|Feb\\s|Feb.\\s|\\February\\s|Mar\\s)?(\\d){1,3}(\\d+|\\s|:\\d+)?(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|PM|am|AM|min|minutes|due|Station|…)?"
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
# Extract only numbers of bus route
# Omit NA rows which are generated when str_extract() fails
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
# Store resulted data frame into a new one for error detection
# Remove rows where bus routes are missing
# Remove intermediate column "Numbers" for concision
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
# Determine whether a post indicates a start or a stop
pattern_status = "^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|return|ease )).*(regular route|Regular route|onward|detour|experienc|suspend|off )"
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
# Test 1: Pass
df2$Post[22:24]
translink(2022,3,2,16)
# Test 2: Pass
df2$Post[53:54]
translink(2022,3,1,13)
translink(2022,1,31,16)
View(df2)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[585:593]
translink(2022,1,31,16)
# row 157, 158 are not detour information; data are not tidy enough:
df2$Post[157]
translink(2022,2,24,21)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[585:593]
translink(2022,1,31,16)
# Pattern to find posts irrelevant to bus routes
pattern_non_bus = "Skytrain|SkyTrain|StationAlert|Elevator|elevator|Expo|WCE|West Coast Express|board|time|Time|SeaBus|Compass|Handy|morning|Morning|evening|desk|Desk|Transit|transit|Good|Rehab| night |tonight| call|will be|changes|Congrats|Pattullo Bridge|Valentines|year|Year|multi"
str_c("1","c")
# Extract numbers of all types
# Store resulted data frame into a new one for error detection
pattern_number = str_c("([A-Z]|Bay\\s|Hwy\\s|stop\\s|Regular.*|Jan\\s|Feb\\s|",
"Feb.\\s|\\February\\s|Mar\\s)?",
"(\\d){1,3}(\\d+|\\s|:\\d+)?",
"(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|",
"PM|am|AM|min|minutes|due|Station|…)?")
pattern_number
source("C:/Users/qq147/Desktop/SFU/STAT240/lab05/bonusq.R", echo=TRUE)
source("C:/Users/qq147/Desktop/SFU/STAT240/lab05/bonusq.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
df2$Post[22:24]
translink(2022,3,2,16)
library(tidyverse)
library(rtweet)
library(twitteR)
# plotting and pipes - tidyverse!
library(ggplot2)
library(dplyr)
# text mining library
library(tidytext)
library(stringr)
source('access.r')
data = userTimeline(
'Translink',
n = 3200,
includeRts = F,
excludeReplies = T
)
data[[1]]$text
data[[1]]$created
save(file = 'translink.data', data)
load('translink.data')
df2$Post[22:24]
translink(2022,3,2,16)
# Test 2: Pass
df2$Post[53:54]
translink(2022,3,1,13)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[585:593]
translink(2022,1,31,16)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rtweet)
library(twitteR)
# plotting and pipes - tidyverse!
library(ggplot2)
library(dplyr)
# text mining library
library(tidytext)
library(stringr)
source('access.r')
data = userTimeline(
'Translink',
n = 3200,
includeRts = F,
excludeReplies = T
)
knit_with_parameters("C:/Users/qq147/Desktop/SFU/STAT240/lab05/Bonus Question.Rmd", encoding = "UTF-8")
library(tidyverse)
library(rtweet)
library(twitteR)
# plotting and pipes - tidyverse!
library(ggplot2)
library(dplyr)
# text mining library
library(tidytext)
library(stringr)
# source('access.r')
# data = userTimeline(
#   'Translink',
#   n = 3200,
#   includeRts = F,
#   excludeReplies = T
# )
#
# data[[1]]$text
# data[[1]]$created
#
# save(file = 'translink.data', data)
load('translink.data')
View(data)
library(tidyverse)
library(rtweet)
library(twitteR)
# plotting and pipes - tidyverse!
library(ggplot2)
library(dplyr)
# text mining library
library(tidytext)
library(stringr)
# source('access.r')
# data = userTimeline(
#   'Translink',
#   n = 3200,
#   includeRts = F,
#   excludeReplies = T
# )
#
# data[[1]]$text
# data[[1]]$created
#
# save(file = 'translink.data', data)
load('translink.data')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rtweet)
library(twitteR)
# plotting and pipes - tidyverse!
library(ggplot2)
library(dplyr)
# text mining library
library(tidytext)
library(stringr)
# source('access.r')
# data = userTimeline(
#   'Translink',
#   n = 3200,
#   includeRts = F,
#   excludeReplies = T
# )
#
# data[[1]]$text
# data[[1]]$created
#
# save(file = 'translink.data', data)
load('translink.data')
time=c()
tweet=c()
for (i in seq_along(data)) {
time[i]=as.character(data[[i]]$created)
tweet[i]=data[[i]]$text
}
f=data.frame(Time = time, Post = tweet)
# head(f)
# It's too long that I have to cut it and use str_c to combine strings
pattern_non_bus = str_c("Skytrain|SkyTrain|StationAlert|Elevator|elevator|",
"Expo|WCE|West Coast Express|board|time|Time|SeaBus|",
"Compass|Handy|morning|Morning|evening|desk|Desk|",
"Transit|transit|Good|Rehab| night |tonight| call|",
"will be|changes|Congrats|Pattullo Bridge|Valentines|",
"year|Year|multi")
pattern_url = "(.*) (.*)" #Greedy match to the last space
for (i in seq_along(df$Post)) {
if (str_detect(df$Post[i],"http")) {
df$Post[i] <- str_replace(df$Post[i],pattern_url,"\\1")
}
}
# It's too long that I have to cut it and use str_c to combine strings
pattern_non_bus = str_c("Skytrain|SkyTrain|StationAlert|Elevator|elevator|",
"Expo|WCE|West Coast Express|board|time|Time|SeaBus|",
"Compass|Handy|morning|Morning|evening|desk|Desk|",
"Transit|transit|Good|Rehab| night |tonight| call|",
"will be|changes|Congrats|Pattullo Bridge|Valentines|",
"year|Year|multi")
df <- f[!grepl(pattern_non_bus,f$Post),]
pattern_url = "(.*) (.*)" #Greedy match to the last space
for (i in seq_along(df$Post)) {
if (str_detect(df$Post[i],"http")) {
df$Post[i] <- str_replace(df$Post[i],pattern_url,"\\1")
}
}
pattern_number = str_c("([A-Z]|Bay\\s|Hwy\\s|stop\\s|Regular.*|Jan\\s|Feb\\s|",
"Feb.\\s|\\February\\s|Mar\\s)?",
"(\\d){1,3}(\\d+|\\s|:\\d+)?",
"(Ave|St |St,|St/|St…|Rd|th|st|nd|rd|pm|",
"PM|am|AM|min|minutes|due|Station|…)?")
df1 <- mutate(df,Numbers = str_extract_all(Post,pattern_number))
pattern_bus_route = "^[A-Z]?\\d{1,3}\\s?$"
for (i in seq_along(df1$Numbers)){
df1$Routes[[i]] <- na.omit(str_extract(df1$Numbers[[i]],pattern_bus_route))
}
df2 <- df1 %>% filter(!(Routes=="character(0)")) %>%
select(-Numbers)
pattern_status = str_c("^(?!.*( clear|Clear|CLEAR| ended| back| over|cancel|",
"return|ease )).*(regular route|Regular route|onward|",
"detour|experienc|suspend|off )")
df2 <- mutate(df2, Status = str_detect(Post,pattern_status))
head(df2,n=3)
translink <- function(y,m,d,h){
# take four arguments of time, e.g., 2020,1,26,3
# Create an empty list to store results
ret = list(start=c(),stop=c())
# format input ymd_h
# i.e., (2020,1,26,3) -> "2020-01-26 03"
if(nchar(m)==1){m=str_c("0",m)}
if(nchar(d)==1){d=str_c("0",d)}
if(nchar(h)==1){h=str_c("0",h)}
date = str_c(y,m,d,sep="-")
datetime = str_c(date,h,sep = " ")
# Match time, then match Status, then combine/append vectors
for (i in seq_along(df2$Time)) {
if (str_detect(df2$Time[[i]], datetime)){
if (df2$Status[[i]]) {
ret$start <- c(ret$start, df2$Routes[[i]])
} else {
ret$stop <- c(ret$stop, df2$Routes[[i]])
}
}
}
# Remove all the Space in the Routes column
ret$start <- gsub('\\s+', '', ret$start)
ret$stop <- gsub('\\s+', '', ret$stop)
# Delete duplicates
ret$start = unique(ret$start)
ret$stop = unique(ret$stop)
# If no match, append warning message
if (length(ret$start)==0) {ret$start <- c(ret$start,"No detour had started")}
if (length(ret$stop)==0) {ret$stop <- c(ret$stop,"No detour had ended")}
return(ret)
}
df2$Post[22:24]
translink(2022,3,2,16)
df2$Post[53:54]
translink(2022,3,1,13)
df2$Post[585:593]
translink(2022,1,31,16)
# rows such as 593 do not include its status; should have been filtered out
# but the default assignment of status goes "FALSE"
View(df2)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[586:594]
translink(2022,1,31,16)
# Test 3: Pass with one corner case (will be included in the next section)
df2$Post[586:594]
translink(2022,1,31,16)
