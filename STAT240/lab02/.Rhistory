xlab="Radius",
ylab="Volume",
ylim=c(0,1500),xlim=c(-1,9),
lwd = 1,
col = "black",
type = "p")
plot(radius,volume,main="The volume of a sphere with different radii in points",
xlab="Radius",
ylab="Volume",
ylim=c(0,1500),xlim=c(-1,9),
lwd = 1,
col = "black",
type = "p",
cex = 0.1)
library(tidyverse)
df <- data.frame(x=radius, y=volume)
df
head(df)
?data.frame
df <- data.frame(radius=radius, volume=volume)
head(df)
ggplot(df,aes(x=radius,y=volume)) + geom_point()
df <- data.frame(Radius=radius, Volume=volume)
ggplot(df,aes(x=Radius,y=Volume)) + geom_point()
ggplot(df,aes(x=Radius,y=Volume)) + geom_point() +
labs(title = "The volume of a sphere with different radii in points")
ggplot(df,aes(x=Radius,y=Volume)) + geom_point() +
labs(title = "The volume of a sphere with different radii in points") +
theme(plot.title = element_text(hjust = 0.5))
theme?
?theme
?theme
ggplot(df,aes(x=Radius,y=Volume)) + geom_point() +
labs(title = "The volume of a sphere with different radii in points") +
theme(plot.title = element_text(size = 2, hjust = 0.5))
ggplot(df,aes(x=Radius,y=Volume)) + geom_point() +
labs(title = "The volume of a sphere with different radii in points") +
theme(plot.title = element_text(size = rel(2), hjust = 0.5))
ggplot(df,aes(x=Radius,y=Volume)) + geom_point() +
labs(title = "The volume of a sphere with different radii in points") +
theme(plot.title = element_text(size = rel(1.5), hjust = 0.5))
plot(radius,volume,main="The volume of a sphere with different radii in points",
xlab="Radius",
ylab="Volume",
ylim=c(0,1500),xlim=c(-1,9),
lwd = 1,
col = "black",
type = "p",
cex = 0.1)
#plot about volume
plot(radius,volume,
main="you should make a better title than this",
xlab="this label needs to make sense",
ylab="put something sensible here")
#plot about Area that will replace the Volume plot
plot(radius,pi*radius^2,
main="you should make a better title than this",
xlab="this label needs to make sense",
ylab="put something sensible here")
#volume
plot(radius,volume,
main="The volume of a sphere with 10,000 radii in line",
xlab="Radius",
ylab="Volume",
type='l')
#Area
lines(1:10,pi*c(1:10)^2,col=2,lty = 2)
#Surface area
points(radius,4*pi*radius^2,
col=3)
#volume
plot(radius,volume,
main="The volume of a sphere with 10,000 radii in line",
xlab="Radius",
ylab="Volume",
type='l')
#Area
lines(1:10,pi*c(1:10)^2,col=2,lty = 2)
#Surface area
points(radius,4*pi*radius^2,col=3)
legend(x=3,y=1000,col=1:3,pch=c(NA,NA,1),lty = c(1,2,NA),
c("Volume","Area","Surface Area"))
exp(1)
exp(log(10))
?exp
2^2
##########################################
# Define parameters
x <- seq(1,10,100)
x
##########################################
# Define parameters
x <- seq(1,10,length=100)
##########################################
# Define parameters
x <- seq(f=1,t=10,length=100)
x
y_1 = x^2
y_2 = 2^x
y_1
y_2
plot(x,y_1,
main = "The growth of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
plot(x,y_1,
main = "The growth of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,200),xlim=c(0,10),
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
##########################################
# Define parameters
x <- seq(f=0,t=10,length=100)
y_1 = x^2
y_2 = 2^x
plot(x,y_1,
main = "The growth of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,200),xlim=c(0,10),
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
##########################################
# Define parameters
x <- seq(f=-10,t=10,length=100)
y_1 = x^2
y_2 = 2^x
plot(x,y_1,
main = "The growth of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,200),xlim=c(-10,10),
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
?legend
legend(1,95,
legend=c("x^2","2^x"),
col = 1:2)
legend(1,2,
legend=c("x^2","2^x"),
col = 1:2)
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
col = 1
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2)
legend(x=3,y=1000,col=1:3,pch=c(NA,NA,1),lty = c(1,2,NA),
c("Volume","Area","Surface Area"))
#volume
plot(radius,volume,
main="The volume of a sphere with 10,000 radii in line",
xlab="Radius",
ylab="Volume",
type='l')
#Area
lines(1:10,pi*c(1:10)^2,col=2,lty = 2)
#Surface area
points(radius,4*pi*radius^2,col=3)
legend(x=3,y=1000,col=1:3,pch=c(NA,NA,1),lty = c(1,2,NA),
c("Volume","Area","Surface Area"))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(1,2))
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
col = 1
type = "l")
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
col = 1
type = "l")
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
col = 1,
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(1,2))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(1,NA))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(NA,NA))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(NA,NA),
lty = c(1,2))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
lty = c(1,2))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
lty = c(1,2))
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(NA,NA),
lty = c(1,2))
plot(x,y_1,
main = "The graphs of x^2 and 2^x",
xlab = "Value of x",
ylab = "Value of y",
ylim=c(0,150),xlim=c(-10,10),
col = 1,
type = "l")
lines(x,y_2,
col = 2,
lty = 2)
legend(-10,150,
legend=c("x^2","2^x"),
col = 1:2,
pch = c(NA,NA),
lty = c(1,2))
poke = read.csv(file = "pokemon_2019.csv", ... )
poke = read.csv(file = "pokemon_2019.csv")
head(poke)
plot(poke[,"Type_1"], horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_2019.csv")
head(poke)
plot(poke[,"Type_1"], horiz=TRUE,las=2)
plot(poke[,"Type_1"], horiz=TRUE,las=2,ylim = (1,10))
plot(poke[,"Type_1"], horiz=TRUE,las=2,ylim = c(1,10))
?plot
barplot(poke[,"Type_1"], horiz=TRUE,las=2,ylim = c(1,10))
barplot(poke[,"Type_1"], horiz=TRUE,las=2)
plot(poke[,"Type_1"], horiz=TRUE,las=2)
View(poke)
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
head(poke)
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
plot(poke[,"Type_1"], horiz=TRUE,las=2)
View(poke)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
head(poke)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
head(poke)
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
View(poke)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
head(poke)
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
head(poke)
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
View(poke)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
poke[,"Type_1"]
plot(poke[,"Type_1"], horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
plot(poke[,"Type_1"], horiz=TRUE,las=2)
plot(poke[,"Type_1"],horiz=TRUE,las=2)
plot(poke[,"Type_1"],horiz=TRUE,las=2)
poke[,"Type_1"]
plot(poke[,"Name"],poke[,"Type_1"],horiz=TRUE,las=2)
is.NA(poke[,"Type_1"])
is.na(poke[,"Type_1"])
is.na(poke)
plot(na.omit(poke)[,"Type_1"],horiz=TRUE,las=2)
poke = read_csv(file = "pokemon_2019.csv",header = TRUE, sep = ",")
poke = read_csv(file = "pokemon_2019.csv")
head(poke)
plot(poke[,"Type_1"],horiz=TRUE,las=2)
poke[2]
poke[3]
plot(poke[3],horiz=TRUE,las=2)
class(poke[3])
poke = read.csv(file = "pokemon_2019.csv")
head(poke)
class(poke[3])
type(poke[3])
typeof(poke[3])
class(poke[3])
poke = read_csv(file = "pokemon_2019.csv")
head(poke)
poke = read.csv(file = "pokemon_2019.csv")
na.omit(poke)
plot(poke[3],horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_2019.csv")
head(poke)
poke = read.csv(file = "pokemon_2019.csv")
head(poke)
plot(poke[3],horiz=TRUE,las=2)
poke = read.csv(file = "pokemon_20191.csv")
poke = read.csv(file = "pokemon_20191.csv")
poke = read.csv(file = "pokemon_2019.csv")
plot(poke[3],horiz=TRUE,las=2)
poke = read.table(file = "pokemon_2019.csv")
head(poke)
plot(poke[3],horiz=TRUE,las=2)
View(poke)
poke = read.csv(file = "pokemon_2019.csv")
View(poke)
poke[,"HP"]>200
poke[poke[,"HP"]>200,"HP"]
which(poke[,"HP"]>200) # these are the row numbers
poke[poke[,"HP"]>200,] #These are the full data rows
View(poke)
##############################
poke[poke[,"Height_m"]>2]
##############################
poke[poke[,"Height_m"]>2,]
##############################
h1<-poke[poke[,"Height_m"]>2,]
l1 <- h1[h1[,"isLegendary"]==True,]
l1 <- h1[h1[,"isLegendary"]=="True",]
l1
View(l1)
select(l1,Height_m,isLegendary)
library(tidyverse)
select(l1,Height_m,isLegendary)
select(l1,Name,Height_m,isLegendary)
poke %>%
select(Name,Height_m,isLegendary) %>%
filter((Height_m > 2)&(isLegendary == "True"))
poke %>%
filter(Body_Style == ("head_arms" | "serpentine_body"))
poke %>%
filter((Body_Style == "head_arms")|(Body_Style == "serpentine_body"))
poke_1 <- poke %>%
filter((Body_Style == "head_arms")|(Body_Style == "serpentine_body"))
plot(poke_1$Attack,poke_1$Defense)
plot(poke_1$Attack,poke_1$Defense,
main = "Attack versus Defense of Head_arms and Serpentine_body Pokemon")
poke %>%
select(Name,Height_m,isLegendary) %>%
filter((Height_m > 2)&(isLegendary == "True"))
plot(poke_1$Attack,poke_1$Defense,
main = "Attack versus Defense of Head_arms and Serpentine_body Pokemon",
xlab = "Attack",
ylab = "Defense",
cex = 0.1)
plot(poke_1$Attack,poke_1$Defense,
main = "Attack versus Defense of Head_arms and Serpentine_body Pokemon",
xlab = "Attack",
ylab = "Defense",
cex = 0.5)
poke[1,]
poke[1,]*NA
pokenew = poke[1,]*NA
library(tidyverse)
pokenew = poke[1,]
pokenew
View(pokenew)
pokenew*NA
pokenew$Number <- 722
names(pokenew)
# names(pokenew)
pokenew$Number <- 722
pokenew$Name <- "Mirrien"
pokenew$Type_1 <- "Ice"
pokenew$Type_2 <- "Poison"
pokenew$HP <- 500
pokenew$Attack <- 500
pokenew$Defense <- 500
pokenew$Sp_Atk <- 500
pokenew$Sp_Def <- 500
pokenew$Speed <- 500
pokenew$Total <- sum(pokenew$Attack:pokenew$Speed)
?sum
pokenew$Total <- sum(pokenew[6:11])
pokenew$Generation <- 6
pokenew$isLegendary <- "True"
pokenew$Color <- "White"
pokenew$hasGender <- "True"
pokenew$Height_m <- 1.75
pokenew$hasMegaEvolution <- "True"
pokenew$Weight_kg <- 50
pokenew$Catch_Rate <- 0
pokenew$Body_Style <- "Dark_meat"
pokemonextra = rbind(pokenew, poke)
View(pokemonextra)
plot(pokemonextra[,"Type_1"], las=2)
pokenew$Type_1 <- "Student"
poke = read.csv(file = "pokemon_2019.csv")
pokemonextra = rbind(pokenew, poke)
is.data.frame(poke)
is.data.frame(pokemonextra)
is.numeric(poke[,"Type_1"])
is.numeric(pokemonextra[,"Type_1"])
is.factor(poke[,"Type_1"])
is.factor(pokemonextra[,"Type_1"])
poke[1:5,"Type_1"]
pokemonextra[1:5,"Type_1"]
unique(poke[,"Type_1"])
pokemonextra[,"Type_1"] = factor(pokemonextra[,"Type_1"])
pokemonextra[1:5,"Type_1"]
as.numeric(poke[,"Type_1"])
factor(poke[,"Attack"])
levels(pokemonextra[,"Type_1"])
levels(poke[,"Type_1"])
unique(poke[,"Type_1"])
levels(poke[,"Type_1"])
levels(pokemonextra[,"Type_1"])
View(pokemonextra)
# Faster: Using a while loop without recursion
# To deal with extreme numbers, use as.bigz() in "gmp" package
library(tidyverse)
library(gmp)
library(RSQLite)
library(RSQLite)
library(RSQLite)
# Slow: Define fib(n) to find n-th Fibonacci number
fib = function(n){ # use recursion
if (n <= 1) {return(n)} # fib(0) = 0, fib(1) = 1
else {return (fib(n-1) + fib(n-2))}
}
# Define sum_fib(n) to find the sum of first n Fibonacci numbers
sum_fib = function(n){
sum = 0 # Start an int to store fib numbers
for (i in seq(1,n)){
sum = sum + fib(i)
}
return(sum)
}
sum_fib(20) # the sum of the first 20 Fibonacci numbers is 17710
# Faster: Using a while loop without recursion
# To deal with extreme numbers, use as.bigz() in "gmp" package
library(tidyverse)
library(gmp)
x = as.bigz(0)
y = as.bigz(1)
v = c(x,y)
i = 1
sum = as.bigz(0)
while (i <= 1000000){
sum = sum+y
i = i + 1
v = c(y,x+y)
x = v[1]
y = v[2]
}
log.bigz(sum) # log of the sum gives an estimate of 481212 with no decimal placed
library(gmp)
library(gmp)
# Faster: Using a while loop without recursion
# To deal with extreme numbers, use as.bigz() in "gmp" package
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(gmp)
library(tidyverse)
library(gmp)
library(gmp)
remove.packages("gmp", lib="~/R/win-library/4.1")
install.packages("gmp")
install.packages("gmp")
library(gmp)
knitr::opts_chunk$set(echo = TRUE)
library(gmp)
knitr::opts_chunk$set(echo = TRUE)
library(gmp)
summary(cars)
library(gmp)
library(gmp)
```{r echo=FALSE}
library(gmp)
